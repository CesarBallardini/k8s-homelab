# -*- mode: ruby -*-
# vi: set ft=ruby :

# Para aprovechar este Vagrantfile necesita Vagrant y Virtualbox instalados:
#
#   * Virtualbox
#
#   * Vagrant
#
#   * Plugins de Vagrant:
#       + vagrant-proxyconf y su configuracion si requiere de un Proxy para salir a Internet
#       + vagrant-cachier
#       + vagrant-disksize
#       + vagrant-share
#       + vagrant-vbguest

VAGRANTFILE_API_VERSION = "2"

HOSTNAME = "minikube"
DOMAIN   = "infra.ballardini.com.ar"


$post_up_message = <<POST_UP_MESSAGE
------------------------------------------------------
Cluster K8S con un solo nodo

URLS:
 - host only - https://minikube.infra.ballardini.com.ar/
              

------------------------------------------------------
POST_UP_MESSAGE


Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|

  config.vm.post_up_message = $post_up_message

  if Vagrant.has_plugin?("vagrant-hostmanager")
    config.hostmanager.enabled = true
    config.hostmanager.manage_host = true
    config.hostmanager.manage_guest = true
    config.hostmanager.ignore_private_ip = false
    config.hostmanager.include_offline = true

    # uso cachier con NFS solamente si el hostmanager gestiona los nombres en /etc/hosts del host
    if Vagrant.has_plugin?("vagrant-cachier")

      config.cache.auto_detect = false
      # W: Download is performed unsandboxed as root as file '/var/cache/apt/archives/partial/xyz' couldn't be accessed by user '_apt'. - pkgAcquire::Run (13: Permission denied)

      config.cache.synced_folder_opts = {
        owner: "_apt"
      }
      # Configure cached packages to be shared between instances of the same base box.
      # More info on http://fgrehm.viewdocs.io/vagrant-cachier/usage
      config.cache.scope = :box
   end

  end

 config.vm.define HOSTNAME do |srv|

    srv.vm.box = "ubuntu/focal64"
    srv.vm.network "private_network", ip: "192.168.33.11"

    srv.vm.boot_timeout = 3600
    srv.vm.box_check_update = true
    srv.ssh.forward_agent = true
    srv.ssh.forward_x11 = true
    srv.vm.hostname = HOSTNAME

    if Vagrant.has_plugin?("vagrant-hostmanager")
      srv.hostmanager.aliases = %W(#{HOSTNAME}.#{DOMAIN} )
    end

    if Vagrant.has_plugin?("vagrant-vbguest") then
        srv.vbguest.auto_update = true
        srv.vbguest.no_install = false
    end

    srv.vm.synced_folder ".", "/vagrant", disabled: false, SharedFoldersEnableSymlinksCreate: false


    srv.vm.provider :virtualbox do |vb|
      vb.gui = false
      vb.cpus = 2
      vb.memory = "2048"
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]

      # https://www.virtualbox.org/manual/ch08.html#vboxmanage-modifyvm mas parametros para personalizar en VB
    end
  end

    ##
    # Aprovisionamiento
    #
    config.vm.provision "fix-no-tty", type: "shell" do |s|
        s.privileged = false
        s.inline = "sudo sed -i '/tty/!s/mesg n/tty -s \\&\\& mesg n/' /root/.profile"
    end

    config.vm.provision "actualiza", type: "shell" do |s|  # http://foo-o-rama.com/vagrant--stdin-is-not-a-tty--fix.html
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          sudo -E apt-get --purge remove apt-listchanges -y > /dev/null 2>&1
          sudo -E apt-get update -y -qq > /dev/null 2>&1
          sudo dpkg-reconfigure --frontend=noninteractive libc6 > /dev/null 2>&1
          sudo -E apt-get install linux-image-generic ${APT_OPTIONS} || true
          sudo -E apt-get upgrade ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get dist-upgrade ${APT_OPTIONS} > /dev/null 2>&1
          sudo -E apt-get autoremove -y > /dev/null 2>&1
          sudo -E apt-get autoclean -y > /dev/null 2>&1
          sudo -E apt-get clean > /dev/null 2>&1
        SHELL
    end

    config.vm.provision "ssh_pub_key", type: :shell do |s|
      begin
          ssh_pub_key = File.readlines("#{Dir.home}/.ssh/id_rsa.pub").first.strip
          s.inline = <<-SHELL
            mkdir -p /root/.ssh/
            touch /root/.ssh/authorized_keys
            echo #{ssh_pub_key} >> /home/vagrant/.ssh/authorized_keys
            echo #{ssh_pub_key} >> /root/.ssh/authorized_keys
          SHELL
      rescue
          puts "No hay claves publicas en el HOME de su pc"
          s.inline = "echo OK sin claves publicas"
      end
    end

    config.vm.provision "ansible-provision", type: :ansible do |ansible|
      ansible.playbook = "provision/site.yml"
      #ansible.config_file = "./vagrant-inventory/ansible.cfg"
      #ansible.inventory_path = "./vagrant-inventory/"
      ansible.verbose= "-vv"
      ansible.become = false
      # heredo la configuracion de Proxy del entorno del host Vagrant:
      ansible.extra_vars = {
        organizacion: "My organization",
        all_proxy:   ENV['all_proxy']   || ENV['http_proxy']  || "",
        http_proxy:  ENV['http_proxy']  || "",
        https_proxy: ENV['https_proxy'] || "",
        ftp_proxy:   ENV['ftp_proxy']   || "",
        no_proxy:    ENV['no_proxy']    || "",

        devops_user_name: 'vagrant',
      }
    end

    config.vm.provision "install_minikube", type: "shell" do |s|
        s.privileged = false
        s.inline = <<-SHELL
          export DEBIAN_FRONTEND=noninteractive
          export APT_LISTCHANGES_FRONTEND=none
          export APT_OPTIONS=' -y --allow-downgrades --allow-remove-essential --allow-change-held-packages -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold '

          sudo apt-get install jq ${APT_OPTIONS}

          ##
          # install kubectl, latest stable version
          #
          kubectl_version=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
          if [ ! -f /usr/local/bin/kubectl ] ;  then
            [ -f kubectl ] || curl -s -LO "https://storage.googleapis.com/kubernetes-release/release/${kubectl_version}/bin/linux/amd64/kubectl"
            sudo install kubectl /usr/local/bin/kubectl
          fi
          kubectl version --client --output=json | jq "."


          ##
          # install latest version of minikube
          #
          if [ ! -f /usr/local/bin/minikube ] ;  then
            [ -f minikube-linux-amd64 ] || curl -s -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
            sudo install minikube-linux-amd64 /usr/local/bin/minikube
          fi

          ##
          # init the cluster
          #
          if minikube status >/dev/null ; then 
            echo minikube cluster already initialized
          else
            newgrp docker << NEWGROUP
            minikube start --driver=docker 2>minikube-start-error.log
NEWGROUP
          fi

          docker --version
          kubectl version --output=json | jq "."


#          if [ -n "${http_proxy}" ] || [ -n "${https_proxy}" ]
#          then
#            # https://snapcraft.io/docs/system-options#heading--proxy
#            sudo snap set system proxy.http="${http_proxy}"
#            sudo snap set system proxy.https="${https_proxy}"
#          fi
#
#          # sudo snap install lxd --channel=latest/stable # ya viene instalado por default
#          sudo snap refresh lxd --channel=latest/stable   # lo actualizo
#
#          sudo apt-get install zfsutils-linux ${APT_OPTIONS} 
#          sudo apt-get install jq -y sshpass  ${APT_OPTIONS} # para las comprobaciones en el README

        SHELL
    end

    config.trigger.after :up do |trigger|
      trigger.name = 'start-minikube'
      trigger.run_remote = {inline: "su --login --command='minikube start' vagrant "}
    end
end
